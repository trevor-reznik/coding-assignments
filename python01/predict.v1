import pandas as pd

# --Input columns to dataframe
# (disincluding outputs columns -- political compass targets)
# (disincluding anything you can't get data for from census)
X= pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[0,1,2,3,4,6,7,8,9,11,12,13,14,15,16,17,18])

# Convert Target column (what you are predicting) to dataframe
target_column = pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[21])

# Convert Target Column dataframe to array
Y = []
for i in target_column['party']:
    Y.append(i)

# Import GaussianNB object from SciKit's Naive Bayes Module
from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()

# Fit Method: github.com/scikit-learn/scikit-learn/blob/95119c13a/sklearn/naive_bayes.py#L185
# clf.fit(list(X),Y)
clf.fit(X, Y)


# --Predict Method--
# github.com/scikit-learn/scikit-learn/blob/95119c13a/sklearn/naive_bayes.py#L60
# Arg = Test Vector = array-like of shape (n_samples, n_features)
# Return = ndarray of shape (n_samples) = Predicted target values for X
# array.reshape(-1, 1) if your data has a single feature
# array.reshape(1, -1) if it contains a single sample
import numpy as np
testVec = np.array([1,6,1,52,0,1,0,0,0,0,0,0,0,1,-3,0,-2])
z = testVec.reshape(1, -1)
print(clf.predict(z))


# --Others Methods--
# scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html


##### -------Troubleshooting------- #####

### check if inputs and targets are all numbers
# import numpy as np
# print(np.isnan(X).any())
# print(np.isnan(Y).any())

### check if inputs and targets are all finite
# print(np.isfinite(X).any())
# print(np.isfinite(Y).any())

### Rehshape input, target, or test vectors to 2D
### array.reshape(-1, 1) if your data has a single feature
### array.reshape(1, -1) if it contains a single sample
# import numpy as np
# testVec = np.array([1,6,1,52,0,1,0,0,0,0,0,0,0,0,1,-3,0,-2])
# properly_formmated_testVec = testVec.reshape(1, -1)

### Search source data file for empy cells
# cntrl H -> Select range of table -> RegEx -> ^$


## social


# Input columns to dataframe
X= pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[0,1,2,3,4,6,7,8,9,11,12,13,14,15,16,17,18])

# Target columns to dataframe
target_column = pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[20])
# To array
Y = []
for i in target_column['social']:
    Y.append(i)

from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(X, Y)

# Reshape user data
import numpy as np
testVec = np.array([1,6,1,52,0,1,0,0,0,0,0,0,0,1,-3,0,-2])
z = testVec.reshape(1, -1)

# Make Prediction for economic x-axis of political compass
print(clf.predict(z))



## economic

import pandas as pd

# Input columns to dataframe
X= pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[0,1,2,3,4,6,7,8,9,11,12,13,14,15,16,17,18])

# Target columns to dataframe
target_column = pd.read_csv(
    '~/btn/btn/btNeutral/algorithm/formatted_data.csv',
    usecols =[19])
# To array
Y = []
for i in target_column['economic']:
    Y.append(i)

from sklearn.naive_bayes import GaussianNB
clf = GaussianNB()
clf.fit(X, Y)

# Reshape user data
import numpy as np
testVec = np.array([1,6,1,52,0,1,0,0,0,0,0,0,0,1,-3,0,-2])
z = testVec.reshape(1, -1)

# Make Prediction for economic x-axis of political compass
print(clf.predict(z))
